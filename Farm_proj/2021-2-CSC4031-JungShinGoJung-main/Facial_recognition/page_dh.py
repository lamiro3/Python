# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainpage1234.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pymysql
import datetime
import cv2
from PyQt5.QtWidgets import *
from PyQt5.uic import loadUi
from PyQt5.QtCore import QTimer, QTime, QDate
from PyQt5.QtGui import *
from bs4 import BeautifulSoup
from pprint import pprint
import requests
import gtts
import os
import numpy as np
from ffpyplayer.player import *
import time
import emotion_faces




## mysql 연결 ###

conn = pymysql.connect(
    user='root',
    passwd='1234',
    host='localhost',
    db='mirrordb',
    charset='utf8'
 )

cursor = conn.cursor()



class Ui_Form_main(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.setGeometry(0,0,1080,1920)

        pal = QPalette()
        pal.setColor(QPalette.Background,QColor(0,0,0))
        self.setAutoFillBackground(True)
        self.setPalette(pal)


        self.clock = QtWidgets.QLabel(Form)
        self.clock.setGeometry(QtCore.QRect(50, -800, 1080,1920))
        self.clock.setStyleSheet("color: #fcfcfc;")
        self.clock.setObjectName("clock_label")
        self.clock.setFont(QtGui.QFont("맑은 고딕",35))

        self.timer=QTimer(self)  #######
        self.timer.start(1000)   ### 1초단위로 새로고침
        self.timer.timeout.connect(self.displayTime)

        now_date = QDate.currentDate()
        dateText = now_date.toString('yyyy년 MM월 dd일')
        self.clock2 = QtWidgets.QLabel(Form)
        self.clock2.setGeometry(QtCore.QRect(50, -850, 1080,1920))
        self.clock2.setStyleSheet("color: #fcfcfc;")
        self.clock2.setObjectName("clock2_label")
        self.clock2.setFont(QtGui.QFont("맑은 고딕",40))
        self.clock2.setText(dateText)

        self.temperature = QtWidgets.QLabel(Form)
        self.temperature.setGeometry(QtCore.QRect(50, -750, 1080,1920))
        self.temperature.setStyleSheet("color: #fcfcfc;")
        self.temperature.setObjectName("clock_label")
        self.temperature.setFont(QtGui.QFont("맑은 고딕",20))

        self.weatherTimer = QTimer(self)
        self.displayWeather()
        self.weatherTimer.start(1000*60)#10분
        self.weatherTimer.timeout.connect(self.displayWeather)



        # self.pushButton = QtWidgets.QPushButton(Form)
        # self.pushButton.setGeometry(QtCore.QRect(1800, 0, 93, 28))
        # self.pushButton.setObjectName("pushButton")

        # self.pushButton2 = QtWidgets.QPushButton(Form)
        # self.pushButton2.setGeometry(QtCore.QRect(1800, 100, 93, 28))
        # self.pushButton2.setObjectName("pushButton2")

        self.medi = QtWidgets.QLabel(Form)
        self.medi.setGeometry(QtCore.QRect(200, 100, 1080,1920))
        self.medi.setStyleSheet("color: #fcfcfc;")
        self.medi.setObjectName("medi_label")
        self.medi.setFont(QtGui.QFont("맑은 고딕",30))
        self.medi.setText("안녕하세요!!! 장충노인회관 입니다 ^^")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def displayTime(self):
        now_time = QTime.currentTime()
        timeText = now_time.toString('hh시 mm분 ss초')
        self.clock.setText(timeText)

    def displayWeather(self):
        html = requests.get('https://search.naver.com/search.naver?where=nexearch&sm=top_hty&fbm=0&ie=utf8&query=%EC%9E%A5%EC%B6%A9%EB%8F%99+%EB%82%A0%EC%94%A8')
        soup = BeautifulSoup(html.text, 'html.parser')
        temper = soup.find('div', class_='weather_graphic').find('div', class_='temperature_text').text
        temper = temper[6:9]
        weather = soup.find('div', class_='temperature_info').find('p', class_='summary').find('span', class_='weather before_slash').text
        temper = temper +"/"+ weather
        self.temperature.setText(temper)


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
    #     # self.pushButton.setText(_translate("Form", "next"))
    #     # self.pushButton2.setText(_translate("Form", "videoPage"))


class Ui_Form_next(object):
    def setupUi(self, Form, faceid):
        Form.setObjectName("Form")
        Form.setGeometry(0,0,768,1360)

        pal = QPalette()
        pal.setColor(QPalette.Background,QColor(0,0,0))
        self.setAutoFillBackground(True)
        self.setPalette(pal)

        self.label = QtWidgets.QLabel(Form)
        self.label.setFont(QtGui.QFont("맑은 고딕",35))
        self.label.setGeometry(QtCore.QRect(100, 100, 1080,1920))
        self.label.setStyleSheet("color: #fcfcfc;")
        self.label.setObjectName("label")
        # self.pushButton = QtWidgets.QPushButton(Form)
        # self.pushButton.setGeometry(QtCore.QRect(1800, 0, 93, 28))
        # self.pushButton.setObjectName("pushButton")
        # self.pushButton2 = QtWidgets.QPushButton(Form)
        # self.pushButton2.setGeometry(QtCore.QRect(1800, 50, 93, 28))
        # self.pushButton2.setObjectName("pushButton2")
        # self.pushButton3 = QtWidgets.QPushButton(Form)
        # self.pushButton3.setGeometry(QtCore.QRect(1800, 100, 93, 28))
        # self.pushButton3.setObjectName("pushButton3")
        self.retranslateUi(Form,faceid)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form, faceid):
        print(faceid)
        days = ['mon', 'tue', 'wen', 'thu', 'fri', 'sat', 'sun']
        today = datetime.datetime.today().weekday()
        faceid = str(faceid)
        sql = 'select name from medicine where userID=' + faceid +' && ' + days[today]+'=1'
        sql2 = 'select name from user where id=' + faceid
        cursor.execute(sql)
        result = cursor.fetchall()
        cursor.execute(sql2)
        result2 = cursor.fetchall()
        if not result2:
            self.text = '오늘복용할약없습니다'
        else:
            i = 0
            today_medi=[]
            while(i<len(result)):
                medicine = result[i][0]
                today_medi.append(medicine)
                if(medicine == pymysql.NULL):
                    break
                i = i+1

            medi = ""
            x=0
            while(x<len(today_medi)):
                medi=medi+", "
                medi=medi+today_medi[x]
                x=x+1
            self.stext = result2[0][0]+"님"+medi+"드셨나요"
        
        self.saveSound()
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", self.stext))
        # self.pushButton.setText(_translate("Form", "back"))
        # self.pushButton2.setText(_translate("Form", "음성재생"))
        # self.pushButton3.setText(_translate("Form", "nextPage"))
        

    def saveSound(self):
        tts = gtts.gTTS(text=self.stext, lang='ko', slow=False)
        tts.save('/home/pi/Desktop/mirror/2021-2-CSC4031-JungShinGoJung/Facial_recognition/asset/medi.mp3')

class Ui_Form_emotion(object):
    def setupUi(self, Form, faceid, emotion_result):
        Form.setObjectName("Form")
        Form.setGeometry(0,0,1080,1920)

        pal = QPalette()
        pal.setColor(QPalette.Background,QColor(0,0,0))
        self.setAutoFillBackground(True)
        self.setPalette(pal)

        self.label = QtWidgets.QLabel(Form)
        self.label.setFont(QtGui.QFont("맑은 고딕",35))
        self.label.setGeometry(QtCore.QRect(300, 100, 1080,1920))
        self.label.setStyleSheet("color: #fcfcfc;")
        self.label.setObjectName("label")
        # self.pushButton = QtWidgets.QPushButton(Form)
        # self.pushButton.setGeometry(QtCore.QRect(1800, 0, 93, 28))
        # self.pushButton.setObjectName("pushButton")
        # self.pushButton2 = QtWidgets.QPushButton(Form)
        # self.pushButton2.setGeometry(QtCore.QRect(1800, 50, 93, 28))
        # self.pushButton2.setObjectName("pushButton2")
        self.retranslateUi(Form,faceid, emotion_result)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form, faceid):
        print(faceid)
        faceid = str(faceid)
        sql = 'select name from user where id=' + faceid
        cursor.execute(sql)
        result = cursor.fetchall()
        emotion_result = emotion_faces.emotion(faceid)

        if emotion_result == 1:
            self.stext = result[0][0] + "님 오늘 기분이 좋으신가요"
        else : self.stext = result[0][0] + "님 오늘 기분이 슬프신가요"

        self.saveSound()
      
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", self.stext))
        # self.pushButton.setText(_translate("Form", "back"))
        # self.pushButton2.setText(_translate("Form", "음성녹음"))

    def playVideo(self, faceid):
        sql = 'select name from stretching where userId=' + str(faceid)
        cursor.execute(sql)
        result = cursor.fetchall()
        print(result)
        if not result :
            video_path='/home/pi/Desktop/mirror/2021-2-CSC4031-JungShinGoJung/Facial_recognition/asset/전신.mp4'
        else:
            video_path = "/home/pi/Desktop/mirror/2021-2-CSC4031-JungShinGoJung/Facial_recognition/asset/"+result[0][0]+".mp4"
       
        video=cv2.VideoCapture(video_path)
        
        print(str(video.get(cv2.CAP_PROP_FPS))+"!!!!!!!!!!!!!!")
        player = MediaPlayer(video_path)
        # fps = int(video.get(cv2.CAP_PROP_FPS))

        fps=1
        prev_time =0 
        cv2.namedWindow("Video")
        cv2.moveWindow("Video", 150, 650)
        while True:
            grabbed, frame=video.read()

            audio_frame, val = player.get_frame()
            # if (grabbed is True):
            if not grabbed :
                print("video end")
                break

            if cv2.waitKey(22) & 0xFF == ord('q'):
                break

            cv2.imshow("Video", frame)
            if val != 'eof' and audio_frame is not None:
                #audio
                img, t = audio_frame
        
        video.release()
        cv2.destroyAllWindows()

    def saveSound(self):
        tts = gtts.gTTS(text=self.stext, lang='ko', slow=False)
        tts.save('/home/pi/Desktop/mirror/2021-2-CSC4031-JungShinGoJung/Facial_recognition/asset/mood.mp3')


 

